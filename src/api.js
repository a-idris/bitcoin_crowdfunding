/** 
 * Module exposing blockchain querying functions.
 * @module src/api
*/

var http = require('http');
var request = require('request');

const host = "http://testnet.blockchain.info/";

/**
 * @callback getBalanceCallback 
 * @param {Error} err
 * @param {string} balance 
 */

/**
 * get total balance from the addresses generated by the xpub
 * 
 * @param {string} xpub 
 * @param {getBalanceCallback} callback {@link getBalanceCallback} 
 */
exports.getBalance = function(xpub, callback) {
    http.get(host + `balance?active=${xpub}`, function(res) {      
        // streaming api, need to accumulate 
        let body = '';
        res.on('data', function(chunk) {
            body += chunk;
        });
        
        res.on('end', function() {
            let result = JSON.parse(body);
            console.log(result);
            let balance = result[xpub].final_balance;
            callback(null, balance);
        });

        // if error is encountered, pass to callback
        res.on('error', err => callback);        
    });    
};

/**
 * Each unspent output object has the properties: tx_age, tx_hash, tx_index, tx_output_n, script, value
 * 
 * @callback getUnspentCallback 
 * @param {Error} err
 * @param {object[]} unspent_outputs
 */

/**
 * get list of UTXOs (unspent transaction outputs) belonging to the addresses generated by the xpub
 * 
 * @param {string} xpub 
 * @param {getUnspentCallback} callback  
 */
exports.getUnspent = function(xpub, callback) {
    http.get(host + `unspent?active=${xpub}`, function(res) {
        let body = '';

        res.on('data', function(chunk) {
            body += chunk;
        });

        res.on('end', function() {
            let result = JSON.parse(body);
            console.log(result);
            callback(null, result.unspent_outputs);
        });

        // if error is encountered, pass to callback
        res.on('error', err => callback);    
    });    
};

/**
 * Will contain the information about the success of the send tx post request
 * 
 * @callback sendTxCallback 
 * @param {Error} err
 * @param {object} response
 * @param {object} response.status Status code of the http response
 * @param {object} response.message Body of the the response
 */

/**
 * send raw transaction to be transmitted to the Bitcoin network. 
 * 
 * @function
 * @param {string} rawtx 
 * @param {sendTxCallback} callback  
 */
exports.sendTx = function (rawtx, callback) {
    request.post(host + "pushtx", { form: { tx: rawtx } }, function(err, response, body) {
        console.log('Status:', response.statusCode);
        console.log('Headers:', JSON.stringify(response.headers));
        console.log('Response:', body);
        if (err) {
            callback(err);
        } else {
            callback(null, { status: response.statusCode, message: body });
        }
    });
}